#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Script de D√©ploiement - Classificateur d'Humour de Commits
============================================================

Script pour d√©ployer et distribuer le classificateur d'humour.
Permet de cr√©er des packages, des archives et de pr√©parer la distribution.

Utilisation:
    python deploy.py --package          # Cr√©er un package portable
    python deploy.py --archive          # Cr√©er une archive ZIP
    python deploy.py --clean            # Nettoyer les fichiers temporaires
    python deploy.py --all              # Tout faire

Auteur: Assistant IA
Version: 1.0
Date: 2025
"""

import os
import sys
import shutil
import zipfile
import argparse
import json
from pathlib import Path
from typing import List, Dict, Optional
from datetime import datetime

class DeploymentManager:
    """Gestionnaire de d√©ploiement pour le classificateur d'humour."""
    
    def __init__(self, project_root: Path = None):
        self.project_root = project_root or Path.cwd()
        self.deploy_dir = self.project_root / "deploy"
        self.package_dir = self.deploy_dir / "package"
        self.archive_dir = self.deploy_dir / "archives"
        
        # Fichiers essentiels √† inclure
        self.essential_files = [
            "commit_humor_classifier.py",
            "process_commits_json.py",
            "install.py",
            "requirements.txt",
            "README.md",
            ".gitignore"
        ]
        
        # Fichiers optionnels
        self.optional_files = [
            "test_installation.py",
            "HUGGINGFACE_GUIDE.md",
            "REFUSION_GUIDE.md",
            "upload_to_hf.py",
            "deploy_package.py"
        ]
        
        # Dossiers √† exclure
        self.exclude_dirs = [
            "__pycache__",
            ".git",
            "deploy",
            "eurobert_full",
            "models",
            "checkpoints",
            "logs",
            "temp",
            ".vscode",
            ".idea"
        ]
        
        # Extensions √† exclure
        self.exclude_extensions = [
            ".pyc",
            ".pyo",
            ".log",
            ".tmp",
            ".cache",
            ".bin",
            ".safetensors",
            ".pt",
            ".pth"
        ]
    
    def print_status(self, message: str, status: str = "INFO") -> None:
        """Affiche un message de statut."""
        emoji_map = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå",
            "WORKING": "üîÑ"
        }
        emoji = emoji_map.get(status, "üìù")
        print(f"{emoji} {message}")
    
    def create_directories(self) -> None:
        """Cr√©e les r√©pertoires de d√©ploiement."""
        self.print_status("Cr√©ation des r√©pertoires de d√©ploiement...", "WORKING")
        
        for directory in [self.deploy_dir, self.package_dir, self.archive_dir]:
            directory.mkdir(parents=True, exist_ok=True)
            self.print_status(f"R√©pertoire cr√©√©: {directory.name}", "SUCCESS")
    
    def should_exclude_file(self, file_path: Path) -> bool:
        """D√©termine si un fichier doit √™tre exclu."""
        # V√©rifier l'extension
        if file_path.suffix.lower() in self.exclude_extensions:
            return True
        
        # V√©rifier les dossiers parents
        for part in file_path.parts:
            if part in self.exclude_dirs:
                return True
        
        # V√©rifier les fichiers temporaires
        if file_path.name.startswith('.'):
            return True
        
        # V√©rifier les fichiers de r√©sultats
        if any(pattern in file_path.name.lower() for pattern in ['_results', '_output', '_processed']):
            return True
        
        return False
    
    def copy_project_files(self) -> None:
        """Copie les fichiers du projet vers le package."""
        self.print_status("Copie des fichiers du projet...", "WORKING")
        
        copied_files = 0
        skipped_files = 0
        
        for file_path in self.project_root.rglob("*"):
            if file_path.is_file() and not self.should_exclude_file(file_path):
                # Calculer le chemin relatif
                relative_path = file_path.relative_to(self.project_root)
                target_path = self.package_dir / relative_path
                
                # Cr√©er le r√©pertoire parent si n√©cessaire
                target_path.parent.mkdir(parents=True, exist_ok=True)
                
                # Copier le fichier
                try:
                    shutil.copy2(file_path, target_path)
                    copied_files += 1
                except Exception as e:
                    self.print_status(f"Erreur lors de la copie de {relative_path}: {e}", "WARNING")
                    skipped_files += 1
            else:
                skipped_files += 1
        
        self.print_status(f"Fichiers copi√©s: {copied_files}, ignor√©s: {skipped_files}", "SUCCESS")
    
    def create_deployment_info(self) -> None:
        """Cr√©e un fichier d'information de d√©ploiement."""
        self.print_status("Cr√©ation des informations de d√©ploiement...", "WORKING")
        
        deployment_info = {
            "project_name": "Classificateur d'Humour de Commits",
            "version": "1.0.0",
            "deployment_date": datetime.now().isoformat(),
            "description": "Classificateur d'humour pour messages de commit bas√© sur EuroBERT",
            "model_info": {
                "base_model": "EuroBERT-210m",
                "optimization": "Optuna",
                "accuracy": {
                    "global": "85.3%",
                    "funny": "82.9%"
                },
                "threshold": 0.35
            },
            "requirements": {
                "python": ">=3.8",
                "torch": ">=1.9.0",
                "transformers": ">=4.20.0",
                "huggingface_hub": ">=0.10.0"
            },
            "installation": {
                "quick_start": "python install.py",
                "test": "python test_installation.py",
                "usage": "python commit_humor_classifier.py"
            },
            "features": [
                "Classification d'humour en temps r√©el",
                "Traitement de fichiers JSON",
                "Installation automatique des d√©pendances",
                "Support CPU et GPU",
                "Interface en ligne de commande",
                "Mode batch et interactif"
            ]
        }
        
        info_file = self.package_dir / "deployment_info.json"
        with open(info_file, 'w', encoding='utf-8') as f:
            json.dump(deployment_info, f, indent=2, ensure_ascii=False)
        
        self.print_status(f"Informations sauvegard√©es: {info_file.name}", "SUCCESS")
    
    def create_quick_start_script(self) -> None:
        """Cr√©e un script de d√©marrage rapide."""
        self.print_status("Cr√©ation du script de d√©marrage rapide...", "WORKING")
        
        quick_start_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ D√©marrage Rapide - Classificateur d'Humour
============================================

Script de d√©marrage rapide pour installer et tester le classificateur.
"""

import os
import sys
import subprocess
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} r√©ussi")
            return True
        else:
            print(f"‚ùå {description} √©chou√©: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de {description}: {e}")
        return False

def main():
    print("üéØ D√©marrage Rapide - Classificateur d'Humour")
    print("=" * 50)
    
    # V√©rifier Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")
    
    # Installation
    if not run_command("python install.py", "Installation des d√©pendances"):
        print("‚ö†Ô∏è Probl√®me d'installation, continuons quand m√™me...")
    
    # Test
    if run_command("python test_installation.py --quick", "Test rapide"):
        print("\nüéâ Installation r√©ussie !")
        print("\nüìö Prochaines √©tapes:")
        print("   ‚Ä¢ python commit_humor_classifier.py --help")
        print("   ‚Ä¢ python process_commits_json.py --help")
        print("   ‚Ä¢ Consultez README.md pour plus d'informations")
    else:
        print("\n‚ö†Ô∏è Des probl√®mes ont √©t√© d√©tect√©s")
        print("   ‚Ä¢ Consultez README.md pour le d√©pannage")
        print("   ‚Ä¢ Ex√©cutez: python test_installation.py --verbose")

if __name__ == "__main__":
    main()
'''
        
        quick_start_file = self.package_dir / "quick_start.py"
        with open(quick_start_file, 'w', encoding='utf-8') as f:
            f.write(quick_start_content)
        
        self.print_status(f"Script cr√©√©: {quick_start_file.name}", "SUCCESS")
    
    def create_archive(self, archive_name: str = None) -> Path:
        """Cr√©e une archive ZIP du package."""
        if not archive_name:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            archive_name = f"commit-humor-classifier_{timestamp}.zip"
        
        archive_path = self.archive_dir / archive_name
        
        self.print_status(f"Cr√©ation de l'archive: {archive_name}", "WORKING")
        
        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file_path in self.package_dir.rglob("*"):
                if file_path.is_file():
                    arcname = file_path.relative_to(self.package_dir)
                    zipf.write(file_path, arcname)
        
        # Calculer la taille
        size_mb = archive_path.stat().st_size / (1024 * 1024)
        self.print_status(f"Archive cr√©√©e: {archive_name} ({size_mb:.1f} MB)", "SUCCESS")
        
        return archive_path
    
    def clean_deployment(self) -> None:
        """Nettoie les fichiers de d√©ploiement."""
        self.print_status("Nettoyage des fichiers de d√©ploiement...", "WORKING")
        
        if self.deploy_dir.exists():
            shutil.rmtree(self.deploy_dir)
            self.print_status("Fichiers de d√©ploiement supprim√©s", "SUCCESS")
        else:
            self.print_status("Aucun fichier de d√©ploiement √† nettoyer", "INFO")
    
    def verify_essential_files(self) -> bool:
        """V√©rifie que tous les fichiers essentiels sont pr√©sents."""
        self.print_status("V√©rification des fichiers essentiels...", "WORKING")
        
        missing_files = []
        for file_name in self.essential_files:
            file_path = self.project_root / file_name
            if not file_path.exists():
                missing_files.append(file_name)
        
        if missing_files:
            self.print_status(f"Fichiers manquants: {', '.join(missing_files)}", "ERROR")
            return False
        else:
            self.print_status("Tous les fichiers essentiels sont pr√©sents", "SUCCESS")
            return True
    
    def create_package(self) -> bool:
        """Cr√©e un package complet."""
        self.print_status("Cr√©ation du package de d√©ploiement...", "WORKING")
        
        # V√©rifier les fichiers essentiels
        if not self.verify_essential_files():
            return False
        
        # Cr√©er les r√©pertoires
        self.create_directories()
        
        # Copier les fichiers
        self.copy_project_files()
        
        # Cr√©er les fichiers additionnels
        self.create_deployment_info()
        self.create_quick_start_script()
        
        self.print_status("Package cr√©√© avec succ√®s", "SUCCESS")
        return True

def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(description="Script de d√©ploiement du classificateur d'humour")
    parser.add_argument('--package', action='store_true', help="Cr√©er un package portable")
    parser.add_argument('--archive', action='store_true', help="Cr√©er une archive ZIP")
    parser.add_argument('--clean', action='store_true', help="Nettoyer les fichiers temporaires")
    parser.add_argument('--all', action='store_true', help="Effectuer toutes les op√©rations")
    parser.add_argument('--output', '-o', help="Nom de l'archive de sortie")
    
    args = parser.parse_args()
    
    if not any([args.package, args.archive, args.clean, args.all]):
        parser.print_help()
        return
    
    # Initialiser le gestionnaire
    manager = DeploymentManager()
    
    print("üöÄ Script de D√©ploiement - Classificateur d'Humour")
    print("=" * 55)
    
    try:
        # Nettoyage
        if args.clean or args.all:
            manager.clean_deployment()
        
        # Cr√©ation du package
        if args.package or args.archive or args.all:
            if not manager.create_package():
                print("‚ùå √âchec de la cr√©ation du package")
                sys.exit(1)
        
        # Cr√©ation de l'archive
        if args.archive or args.all:
            archive_path = manager.create_archive(args.output)
            print(f"\nüì¶ Archive disponible: {archive_path}")
        
        print("\n‚úÖ D√©ploiement termin√© avec succ√®s !")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è D√©ploiement interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur lors du d√©ploiement: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()