#!/usr/bin/env python3
"""
Script de test du mod√®le avant upload sur Hugging Face
"""

import os
import sys
from pathlib import Path
import json

def test_model_structure():
    """V√©rifier la structure du mod√®le"""
    print("üîç V√©rification de la structure du mod√®le...")
    
    model_path = Path("eurobert_full")
    
    required_files = {
        "config.json": "Configuration du mod√®le",
        "model.safetensors": "Poids du mod√®le",
        "tokenizer.json": "Tokenizer",
        "tokenizer_config.json": "Configuration du tokenizer",
        "special_tokens_map.json": "Tokens sp√©ciaux",
        "configuration_eurobert.py": "Configuration personnalis√©e",
        "modeling_eurobert.py": "Mod√®le personnalis√©"
    }
    
    missing_files = []
    
    for file, description in required_files.items():
        file_path = model_path / file
        if file_path.exists():
            size = file_path.stat().st_size
            print(f"‚úÖ {file} ({size:,} bytes) - {description}")
        else:
            missing_files.append(file)
            print(f"‚ùå {file} - {description}")
    
    if missing_files:
        print(f"\n‚ùå Fichiers manquants : {', '.join(missing_files)}")
        return False
    
    print("‚úÖ Tous les fichiers requis sont pr√©sents")
    return True

def test_config_validity():
    """V√©rifier la validit√© de la configuration"""
    print("\nüîç V√©rification de la configuration...")
    
    config_path = Path("eurobert_full/config.json")
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # V√©rifier les champs essentiels
        required_fields = [
            "model_type",
            "num_hidden_layers",
            "hidden_size",
            "num_attention_heads",
            "vocab_size"
        ]
        
        for field in required_fields:
            if field in config:
                print(f"‚úÖ {field}: {config[field]}")
            else:
                print(f"‚ùå Champ manquant : {field}")
                return False
        
        # V√©rifier auto_map
        if "auto_map" in config:
            print("‚úÖ auto_map configur√© pour les classes personnalis√©es")
            for key, value in config["auto_map"].items():
                print(f"   {key}: {value}")
        else:
            print("‚ö†Ô∏è  auto_map non configur√©")
        
        print("‚úÖ Configuration valide")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture de la configuration : {e}")
        return False

def test_model_loading():
    """Tester le chargement du mod√®le"""
    print("\nüîç Test de chargement du mod√®le...")
    
    try:
        from transformers import AutoTokenizer, AutoModelForSequenceClassification
        
        # Charger le tokenizer
        print("üì• Chargement du tokenizer...")
        tokenizer = AutoTokenizer.from_pretrained("eurobert_full", trust_remote_code=True)
        print(f"‚úÖ Tokenizer charg√© - Vocabulaire : {tokenizer.vocab_size}")
        
        # Charger le mod√®le
        print("üì• Chargement du mod√®le...")
        model = AutoModelForSequenceClassification.from_pretrained("eurobert_full", trust_remote_code=True)
        print(f"‚úÖ Mod√®le charg√© - Param√®tres : {model.num_parameters():,}")
        
        # Test d'inf√©rence simple
        print("üß™ Test d'inf√©rence...")
        test_message = "gcc et moi c'est compliqu√©"
        inputs = tokenizer(test_message, return_tensors="pt", truncation=True, padding=True)
        
        import torch
        with torch.no_grad():
            outputs = model(**inputs)
            probabilities = torch.nn.functional.softmax(outputs.logits, dim=-1)
            confidence = probabilities.max().item()
        
        print(f"‚úÖ Inf√©rence r√©ussie - Confiance : {confidence:.3f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement : {e}")
        return False

def test_huggingface_compatibility():
    """Tester la compatibilit√© avec Hugging Face"""
    print("\nüîç Test de compatibilit√© Hugging Face...")
    
    try:
        # V√©rifier que les d√©pendances sont install√©es
        import huggingface_hub
        print(f"‚úÖ huggingface_hub version : {huggingface_hub.__version__}")
        
        import transformers
        print(f"‚úÖ transformers version : {transformers.__version__}")
        
        # V√©rifier la connexion
        from huggingface_hub import HfApi
        api = HfApi()
        try:
            user_info = api.whoami()
            print(f"‚úÖ Connect√© √† Hugging Face : {user_info['name']}")
        except Exception:
            print("‚ö†Ô∏è  Non connect√© √† Hugging Face (utilisez : huggingface-cli login)")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante : {e}")
        return False

def main():
    print("üß™ Test du mod√®le avant upload sur Hugging Face")
    print("=" * 60)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not Path("eurobert_full").exists():
        print("‚ùå Dossier 'eurobert_full' introuvable")
        print("üí° Assurez-vous d'√™tre dans le r√©pertoire commit-humor-classifier")
        return
    
    tests = [
        ("Structure du mod√®le", test_model_structure),
        ("Configuration", test_config_validity),
        ("Chargement du mod√®le", test_model_loading),
        ("Compatibilit√© Hugging Face", test_huggingface_compatibility)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüìã Test : {test_name}")
        if test_func():
            passed += 1
        else:
            failed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä R√©sultats : {passed} ‚úÖ r√©ussis, {failed} ‚ùå √©chou√©s")
    
    if failed == 0:
        print("üéâ Tous les tests sont pass√©s ! Votre mod√®le est pr√™t pour l'upload.")
        print("\nüöÄ √âtapes suivantes :")
        print("1. python quick_upload_hf.py")
        print("2. ou python upload_to_hf.py --repo_name votre-nom/eurobert-commit-humor")
    else:
        print("‚ùå Certains tests ont √©chou√©. Corrigez les probl√®mes avant l'upload.")
        print("üìñ Consultez HUGGINGFACE_GUIDE.md pour plus d'aide")

if __name__ == "__main__":
    main()