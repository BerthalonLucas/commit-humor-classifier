#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîÑ Script de Mise √† Jour - Classificateur d'Humour de Commits
============================================================

Script pour mettre √† jour le classificateur d'humour, ses d√©pendances
et t√©l√©charger les nouvelles versions du mod√®le si disponibles.

Utilisation:
    python update.py                    # Mise √† jour compl√®te
    python update.py --dependencies     # Mise √† jour des d√©pendances uniquement
    python update.py --model            # Mise √† jour du mod√®le uniquement
    python update.py --check            # V√©rifier les mises √† jour disponibles
    python update.py --force            # Forcer la mise √† jour

Auteur: Assistant IA
Version: 1.0
Date: 2025
"""

import os
import sys
import json
import subprocess
import argparse
import requests
from pathlib import Path
from typing import Dict, List, Tuple, Optional
from datetime import datetime

class UpdateManager:
    """Gestionnaire de mise √† jour pour le classificateur d'humeur."""
    
    def __init__(self, project_root: Path = None):
        self.project_root = project_root or Path.cwd()
        self.config_file = self.project_root / "config.json"
        self.requirements_file = self.project_root / "requirements.txt"
        
        # Charger la configuration
        self.config = self.load_config()
        
        # URLs et informations de mise √† jour
        self.update_urls = {
            "huggingface_api": "https://huggingface.co/api/models",
            "pypi_api": "https://pypi.org/pypi",
            "github_releases": "https://api.github.com/repos"
        }
    
    def load_config(self) -> Dict:
        """Charge la configuration du projet."""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                return self.get_default_config()
        except Exception as e:
            self.print_status(f"Erreur lors du chargement de la configuration: {e}", "WARNING")
            return self.get_default_config()
    
    def get_default_config(self) -> Dict:
        """Retourne une configuration par d√©faut."""
        return {
            "project": {
                "name": "Classificateur d'Humour de Commits",
                "version": "1.0.0"
            },
            "model": {
                "huggingface_repo": "LBerthalon/eurobert-commit-humor"
            },
            "requirements": {
                "torch": ">=1.9.0",
                "transformers": ">=4.20.0",
                "huggingface_hub": ">=0.10.0"
            }
        }
    
    def print_status(self, message: str, status: str = "INFO") -> None:
        """Affiche un message de statut."""
        emoji_map = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå",
            "WORKING": "üîÑ",
            "UPDATE": "üÜô"
        }
        emoji = emoji_map.get(status, "üìù")
        print(f"{emoji} {message}")
    
    def run_command(self, command: List[str], description: str) -> Tuple[bool, str]:
        """Ex√©cute une commande et retourne le r√©sultat."""
        try:
            self.print_status(f"{description}...", "WORKING")
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                check=False
            )
            
            if result.returncode == 0:
                self.print_status(f"{description} r√©ussi", "SUCCESS")
                return True, result.stdout.strip()
            else:
                self.print_status(f"{description} √©chou√©", "ERROR")
                return False, result.stderr.strip()
                
        except Exception as e:
            self.print_status(f"Erreur lors de {description}: {e}", "ERROR")
            return False, str(e)
    
    def check_python_packages_updates(self) -> Dict[str, Dict]:
        """V√©rifie les mises √† jour disponibles pour les packages Python."""
        self.print_status("V√©rification des mises √† jour des packages Python...", "WORKING")
        
        updates_available = {}
        
        if not self.requirements_file.exists():
            self.print_status("Fichier requirements.txt non trouv√©", "WARNING")
            return updates_available
        
        # Lire les requirements
        with open(self.requirements_file, 'r') as f:
            requirements = f.read().splitlines()
        
        for req in requirements:
            if req.strip() and not req.startswith('#'):
                package_name = req.split('>=')[0].split('==')[0].strip()
                
                try:
                    # Obtenir la version install√©e
                    success, current_version = self.run_command(
                        [sys.executable, '-c', f'import {package_name}; print({package_name}.__version__)'],
                        f"V√©rification de {package_name}"
                    )
                    
                    if success:
                        # V√©rifier la derni√®re version sur PyPI
                        try:
                            response = requests.get(f"https://pypi.org/pypi/{package_name}/json", timeout=10)
                            if response.status_code == 200:
                                data = response.json()
                                latest_version = data['info']['version']
                                
                                if current_version != latest_version:
                                    updates_available[package_name] = {
                                        'current': current_version,
                                        'latest': latest_version,
                                        'update_available': True
                                    }
                                else:
                                    updates_available[package_name] = {
                                        'current': current_version,
                                        'latest': latest_version,
                                        'update_available': False
                                    }
                        except requests.RequestException:
                            self.print_status(f"Impossible de v√©rifier {package_name} sur PyPI", "WARNING")
                            
                except Exception:
                    self.print_status(f"Package {package_name} non install√©", "WARNING")
        
        return updates_available
    
    def check_model_updates(self) -> Dict[str, any]:
        """V√©rifie les mises √† jour du mod√®le sur Hugging Face."""
        self.print_status("V√©rification des mises √† jour du mod√®le...", "WORKING")
        
        model_info = {
            'update_available': False,
            'current_version': 'local',
            'latest_version': 'unknown'
        }
        
        try:
            repo_id = self.config.get('model', {}).get('huggingface_repo', '')
            if not repo_id:
                self.print_status("Repository Hugging Face non configur√©", "WARNING")
                return model_info
            
            # V√©rifier les informations du mod√®le
            response = requests.get(f"https://huggingface.co/api/models/{repo_id}", timeout=10)
            if response.status_code == 200:
                data = response.json()
                last_modified = data.get('lastModified', '')
                
                # V√©rifier si le mod√®le local existe
                local_model_path = self.project_root / "eurobert_full"
                if local_model_path.exists():
                    # Comparer les dates de modification
                    local_mtime = datetime.fromtimestamp(local_model_path.stat().st_mtime)
                    remote_mtime = datetime.fromisoformat(last_modified.replace('Z', '+00:00'))
                    
                    if remote_mtime > local_mtime:
                        model_info['update_available'] = True
                        model_info['latest_version'] = last_modified
                        self.print_status("Mise √† jour du mod√®le disponible", "UPDATE")
                    else:
                        self.print_status("Mod√®le √† jour", "SUCCESS")
                else:
                    model_info['update_available'] = True
                    model_info['latest_version'] = last_modified
                    self.print_status("Mod√®le non t√©l√©charg√© localement", "INFO")
            else:
                self.print_status("Impossible de v√©rifier le mod√®le sur Hugging Face", "WARNING")
                
        except requests.RequestException as e:
            self.print_status(f"Erreur de connexion √† Hugging Face: {e}", "WARNING")
        except Exception as e:
            self.print_status(f"Erreur lors de la v√©rification du mod√®le: {e}", "ERROR")
        
        return model_info
    
    def update_dependencies(self, force: bool = False) -> bool:
        """Met √† jour les d√©pendances Python."""
        self.print_status("Mise √† jour des d√©pendances...", "WORKING")
        
        if not self.requirements_file.exists():
            self.print_status("Fichier requirements.txt non trouv√©", "ERROR")
            return False
        
        # Commande de mise √† jour
        update_command = [
            sys.executable, '-m', 'pip', 'install', '--upgrade',
            '-r', str(self.requirements_file)
        ]
        
        if force:
            update_command.append('--force-reinstall')
        
        success, output = self.run_command(update_command, "Mise √† jour des d√©pendances")
        
        if success:
            self.print_status("D√©pendances mises √† jour avec succ√®s", "SUCCESS")
        else:
            self.print_status(f"√âchec de la mise √† jour des d√©pendances: {output}", "ERROR")
        
        return success
    
    def update_model(self, force: bool = False) -> bool:
        """Met √† jour le mod√®le depuis Hugging Face."""
        self.print_status("Mise √† jour du mod√®le...", "WORKING")
        
        try:
            # Utiliser le script de classification pour t√©l√©charger le mod√®le
            classifier_script = self.project_root / "commit_humor_classifier.py"
            
            if not classifier_script.exists():
                self.print_status("Script de classification non trouv√©", "ERROR")
                return False
            
            # Supprimer le mod√®le local si force est activ√©
            if force:
                local_model_path = self.project_root / "eurobert_full"
                if local_model_path.exists():
                    import shutil
                    shutil.rmtree(local_model_path)
                    self.print_status("Mod√®le local supprim√©", "INFO")
            
            # T√©l√©charger le mod√®le
            success, output = self.run_command(
                [sys.executable, str(classifier_script), '--download-only'],
                "T√©l√©chargement du mod√®le"
            )
            
            if success:
                self.print_status("Mod√®le mis √† jour avec succ√®s", "SUCCESS")
            else:
                self.print_status(f"√âchec de la mise √† jour du mod√®le: {output}", "ERROR")
            
            return success
            
        except Exception as e:
            self.print_status(f"Erreur lors de la mise √† jour du mod√®le: {e}", "ERROR")
            return False
    
    def create_backup(self) -> bool:
        """Cr√©e une sauvegarde avant la mise √† jour."""
        self.print_status("Cr√©ation d'une sauvegarde...", "WORKING")
        
        try:
            import shutil
            
            backup_dir = self.project_root / "backup"
            backup_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = backup_dir / f"backup_{timestamp}"
            
            # Sauvegarder les fichiers importants
            important_files = [
                "commit_humor_classifier.py",
                "process_commits_json.py",
                "config.json",
                "requirements.txt"
            ]
            
            backup_path.mkdir(exist_ok=True)
            
            for file_name in important_files:
                file_path = self.project_root / file_name
                if file_path.exists():
                    shutil.copy2(file_path, backup_path / file_name)
            
            self.print_status(f"Sauvegarde cr√©√©e: {backup_path}", "SUCCESS")
            return True
            
        except Exception as e:
            self.print_status(f"Erreur lors de la sauvegarde: {e}", "ERROR")
            return False
    
    def run_post_update_tests(self) -> bool:
        """Ex√©cute les tests apr√®s mise √† jour."""
        self.print_status("Ex√©cution des tests post-mise √† jour...", "WORKING")
        
        test_script = self.project_root / "test_installation.py"
        
        if not test_script.exists():
            self.print_status("Script de test non trouv√©", "WARNING")
            return True  # Pas d'√©chec si pas de tests
        
        success, output = self.run_command(
            [sys.executable, str(test_script), '--quick'],
            "Tests post-mise √† jour"
        )
        
        if success:
            self.print_status("Tests r√©ussis", "SUCCESS")
        else:
            self.print_status(f"√âchec des tests: {output}", "ERROR")
        
        return success

def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(description="Script de mise √† jour du classificateur d'humour")
    parser.add_argument('--dependencies', action='store_true', help="Mettre √† jour les d√©pendances uniquement")
    parser.add_argument('--model', action='store_true', help="Mettre √† jour le mod√®le uniquement")
    parser.add_argument('--check', action='store_true', help="V√©rifier les mises √† jour disponibles")
    parser.add_argument('--force', action='store_true', help="Forcer la mise √† jour")
    parser.add_argument('--no-backup', action='store_true', help="Ne pas cr√©er de sauvegarde")
    parser.add_argument('--no-tests', action='store_true', help="Ne pas ex√©cuter les tests")
    
    args = parser.parse_args()
    
    # Initialiser le gestionnaire
    manager = UpdateManager()
    
    print("üîÑ Script de Mise √† Jour - Classificateur d'Humour")
    print("=" * 55)
    
    try:
        # Mode v√©rification uniquement
        if args.check:
            print("\nüìã V√©rification des mises √† jour disponibles...")
            
            # V√©rifier les packages
            package_updates = manager.check_python_packages_updates()
            if package_updates:
                print("\nüì¶ Mises √† jour de packages disponibles:")
                for package, info in package_updates.items():
                    if info['update_available']:
                        print(f"   ‚Ä¢ {package}: {info['current']} ‚Üí {info['latest']}")
            
            # V√©rifier le mod√®le
            model_updates = manager.check_model_updates()
            if model_updates['update_available']:
                print("\nü§ñ Mise √† jour du mod√®le disponible")
            
            return
        
        # Cr√©er une sauvegarde
        if not args.no_backup:
            manager.create_backup()
        
        success = True
        
        # Mise √† jour des d√©pendances
        if args.dependencies or (not args.model and not args.dependencies):
            if not manager.update_dependencies(args.force):
                success = False
        
        # Mise √† jour du mod√®le
        if args.model or (not args.model and not args.dependencies):
            if not manager.update_model(args.force):
                success = False
        
        # Tests post-mise √† jour
        if not args.no_tests and success:
            if not manager.run_post_update_tests():
                success = False
        
        if success:
            print("\n‚úÖ Mise √† jour termin√©e avec succ√®s !")
            print("\nüìö N'oubliez pas de consulter le README.md pour les nouveaut√©s")
        else:
            print("\n‚ö†Ô∏è Mise √† jour termin√©e avec des erreurs")
            print("   ‚Ä¢ Consultez les messages ci-dessus")
            print("   ‚Ä¢ V√©rifiez les sauvegardes dans le dossier 'backup'")
            sys.exit(1)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Mise √† jour interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la mise √† jour: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()